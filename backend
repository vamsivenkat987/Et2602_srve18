#!/usr/bin/python
import time
from datetime import datetime
import sqlite3
from easysnmp import Session
from sqlite3 import Error

VirtualL = 'DEFAULT_VLAN()'
def  create_connection(db_file):
    con = None
    try:
        con = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    finally:
        if con:
            reaction = con.execute('Select * from switches')
            for items in reaction:
                ip = items[0]; port=int(items[1]); community=items[2]; version=int(items[3])
                probing_with_oids(ip, port, community,version, con)

            con.close()
def probing_with_oids(ip, port, community, version, con):
    oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
            'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
            'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
            'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
            'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
            'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
            'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
            'sysDescr':'1.1.3.6.1.2.1.1.1',
            'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
            'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}
    try:
        session = Session(hostname=ip, remote_port=port, version=version, community=community)
    except Exception as e:
        print(e)
        unness = con.execute("select unness from switches where ip=?, port=?",(ip,port))
        unness += 1
        con.execute("update switches set unness=? where (ip=? and port=?)",(unness,ip,port))
        con.commit()
    begin = str(datetime.fromtimestamp(int(time.time())))
    print(begin)
    try:
        macs = session.walk(oids['dot1dTpFdbEntryAddress'])
        vlports = session.walk(oids['dot1dTpFdbEntryPort'])
        for m,p in zip(macs, vlports):
            oid = m.oid;oid_index = m.oid_index;snmp_type=m.snmp_type
            mac = ':'.join('{:02x}'.format(ord(a)) for a in m.numbervalue)
            pval = p.numbervalue
            print(ip,mac,pval)
            reaction = con.execute("SELECT * from List where (port=? and Device=?)",(pval,ip))
            fetch_data = reaction.fetchall()
            for connected_macs in fetch_data:
                m = connected_macs[3]
            if len(fetch_data)==0:
                print(ip,mac,pval)
                con.execute('''INSERT INTO List(Device, VLANS, port, MACS) values (?,?,?,?)''',(ip,VirtualL,pval,mac))
                con.commit()
            elif len(fetch_data)==1 and m.find(mac)==-1:
                finalmac = m+","+mac
                con.execute("UPDATE List set MACS=? where port=?",(finalmac,pval))
                con.commit()
        virtuallansnum = []
        virtuallanname = []
        vlans = session.walk(oids['vlans'])
        virtuallanindex = session.walk(oids['dot1qVlanStaticName'])
        values = []
        virtuallan_oids = []
        for index, vlan in zip(virtuallanindex, vlans):
            numbervalue = ':'.join('{:02x}'.format(ord(x)) for x in vlan.numbervalue)
            values = numbervalue.split(':')
            oid = vlan.oid
            virtuallan_oids.append(oid)
            vname = index.numbervalue
            vnums = oid.split('.')
            vnum = str(vnums[-1])
            combine = ''
            if vname != VirtualL:
                for i in range(len(values)):
                    hexlist = values
                    mac_hex = hexlist[i]
                    scale = 16
                    no_of_bits = 8
                    orghex = bin(int(mac_hex, scale))[2:].zfill(no_of_bits)
                    combine = combine + str(orghex)
                    orghex = ''
                    listvls = list(combine)
                for i in range(len(listvls)):
                    num = i + 1
                    virtuallanname.append(str(vname))
                    virtuallansnum.append(num)
        for i in range(len(virtuallansnum)):
            portlan = '1'
            con.execute("update List set VLANS = ? where port=?", (virtuallanname[i],virtuallansnum[i]))
            time.sleep(0.005)
	    con.commit()
    except Exception as e:
        print(str(e)+' '+str(ip)+":"+str(port))
    finish = str(datetime.fromtimestamp(int(time.time())))
    print(finish)
    print('ok!')
    con.execute("update switches set first_probetime=?, latest_probetime=? where (ip=? and port=?)",(begin, finish, ip, port))
    con.commit()
    print("Db updated!")
if  __name__=='__main__':
    while True:
        create_connection('tracamac.db')
        time.sleep(60)

