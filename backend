#!/usr/bin/python


import time
from datetime import datetime
import sqlite3
from easysnmp import Session
from sqlite3 import Error

V = 'DEFAULT_VLAN(1)'
def establish_connection(db_file):
    c = None
    try:
        c = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    finally:
        if c:
            d = c.execute('Select * from manager')
            for items in d:
                ip = items[0]; port=int(items[1]); community=items[2]; version=int(items[3])
                probe_device(ip, port, community,version, c)

            c.close()
def probe_device(ip, port, community, version, connections):
    oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
            'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
            'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
            'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
            'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
            'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
            'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
            'sysDescr':'1.1.3.6.1.2.1.1.1',
            'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
            'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}
    try:
        session = Session(hostname=ip, remote_port=port, version=version, community=community)
    except Exception as e:
        print(e)
        failed = c.execute("select failed from manager where ip=?, port=?",(ip,port))
        failed += 1
        c.execute("update manager set failed=? where (ip=? and port=?)",(failed,ip,port))
        close.commit()
    start = str(datetime.fromtimestamp(int(time.time())))
    try:
        macsids = session.walk(oids['dot1dTpFdbEntryAddress'])
        portnum = session.walk(oids['dot1dTpFdbEntryPort'])
        for m,p in zip(macsids, portnum):
            oid = m.oid;oid_index = m.oid_index;snmp_type=m.snmp_type
            mac = ':'.join('{:02x}'.format(ord(a)) for a in m.value)
            portval = p.value
            d = c.execute("SELECT * from finalproject where (PORT=? and IPADDRESS=?)",(portval,ip))
            fetch_data = d.fetchall()
            for connected_macs in fetch_data:
                m = connected_macs[3]
            if len(fetch_data)==0:
                c.execute('''INSERT INTO finalproject(IPADDRESS, VLAN, PORT, MACS) values (?,?,?,?)''',(ip,VL,portval,mac))
                c.commit()
            elif len(fetch_data)==1 and m.find(mac)==-1:
                finalmac = m+","+mac
                c.execute("UPDATE finalproject set MACS=? where PORT=?",(finalmac,portval))
                c.commit()
        vlansnum = []
        vlanname = []
        vlans = session.walk(oids['vlans'])
        vlanindex = session.walk(oids['dot1qVlanStaticName'])
        values = []
        vlan_oids = []
        for index, vlan in zip(vlanindex, vlans):
            value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
            values = value.split(':')
            oid = vlan.oid
            vlan_oids.append(oid)
            vname = index.value
            vnums = oid.split('.')
            vnum = str(vnums[-1])
            combine = ''
            if vname != V:
                for i in range(len(values)):
                    k = values
                    s = k[i]
                    scale = 16
                    no_of_bits = 8
                    orghex = bin(int(s, scale))[2:].zfill(no_of_bits)
                    combine = combine + str(orghex)
                    orghex = ''
                    listvls = list(combine)
                for i in range(len(listvls)):
                    if listvls[i] == '1':
                        num = i + 1
                        vlanname.append(str(vname) + '(' + vnum + ')')
                        vlansnum.append(num)
        for i in range(len(vlansnum)):
            portlan = '1'
            c.execute("update finalproject set VLAN = ? where PORT=?", (vlanname[i],vlansnum[i]))
            c.commit()
    except Exception as e:
        print(str(e)+' '+str(ip)+":"+str(port))
    finished = str(datetime.fromtimestamp(int(time.time())))
    c.execute("update manager set firstprob=?, lastprob=? where (ip=? and port=?)",(start, finished, ip, port))
    c.commit()
if  __name__=='__main__':
    while True:
      establish_connection('raina.db')
      time.sleep(60)
	  